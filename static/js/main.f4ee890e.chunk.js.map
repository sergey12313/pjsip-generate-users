{"version":3,"sources":["hooks.js","components/TextArea.jsx","components/Input.jsx","components/Header.jsx","components/ContextBlock.jsx","utils/userHandling.js","App.jsx","index.js"],"names":["useInput","value","useState","input","setInput","target","useRandomId","Math","random","TextArea","label","onChange","rows","cols","readOnly","id","className","htmlFor","Input","type","otherProps","name","Header","href","ContextBlock","oneContext","oneContextChange","contextName","onNameChange","checked","disabled","genUserFromTemplate","password","context","App","transportValue","setTransportValue","transportName","setTransportName","uplinkName","setUplinkName","uplinkIp","setUplinkIp","isOneContext","setIsOneContext","oneContextName","setOneContextName","uplinkAor","serUplinkAor","users","setUsers","userList","setUserList","resultStr","setResultStr","useEffect","config","transport","replaceAll","generateConfig","userParsed","trim","split","map","el","startsWith","endsWith","slice","usersParse","usersConfig","user","join","generateUsersConfig","usersString","generateUserList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4ee890e.chunk.js","sourcesContent":["import {useState} from \"react\"\n\nexport const useInput = (value) => {\n    const [input, setInput] = useState(value)\n    const onInputChange = ({target: {value}}) => {\n        setInput(value)\n    }\n    return [input, onInputChange, setInput]\n}\n\nexport const useRandomId = () => {\n   return useState(()=> `id${Math.random()}`)[0]\n}","import React from 'react'\nimport { useRandomId } from '../hooks'\n\nconst TextArea = ({label, value, onChange, rows=5, cols=30, readOnly}) => {\n    const id =  useRandomId()\n\n    return (\n        <div className=\"form-group\">\n        <label htmlFor={id}>{label}:</label>\n        <textarea id={id} cols={cols} rows={rows}  value={value} onChange={onChange} readOnly={readOnly}>Your text</textarea>\n      </div>\n    )\n}\n\nexport default TextArea\n","import React from 'react'\nimport { useRandomId } from '../hooks'\n\nconst Input = ({label, type=\"text\", ...otherProps}) => {\n    const id = useRandomId()\n    return (\n        <div className=\"form-group\">\n        <label htmlFor={id}>{label}:</label>\n        <input id={id} name=\"text\" type={type} {...otherProps}/>\n      </div>\n    )\n}\n\nexport default Input\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div className=\"terminal-nav\">\n      <div className=\"terminal-logo\">\n        <div className=\"logo terminal-prompt\">\n          <a href=\"/\" className=\"no-style\">\n            Pjsip.conf generator\n          </a>\n        </div>\n      </div>\n      <nav className=\"terminal-menu\"></nav>\n    </div>\n  );\n};\n\nexport default Header;\n","\nimport Input from \"./Input\";\n\nfunction ContextBlock({ oneContext = true, oneContextChange, contextName, onNameChange }) {\n  const handleCheckboxChange = ({ target: { checked } }) => {\n    oneContextChange(checked);\n  };\n\n\n  return (\n    <div>\n      <div className=\"form-group\">\n        <label htmlFor=\"check\">One context:</label>\n        <input\n          htmlFor=\"check\"\n          type=\"checkbox\"\n          id=\"check\"\n          checked={oneContext}\n          onChange={handleCheckboxChange}\n        />\n        {<Input value={contextName} onChange={onNameChange} disabled={!oneContext} label=\"Context name\"></Input>}\n      </div>\n    </div>\n  );\n}\n\nexport default ContextBlock;\n","const genUserFromTemplate = ({ name, password, context }) => `[${name}]\ntype = endpoint\ncontext = ${context}\nrtp_symmetric = yes\ndirect_media=no\nforce_rport=yes\ndisallow = all\nallow = ulaw\naors = ${name}\nauth = auth${name}\n \n[${name}]\ntype = aor\nremove_existing = yes\nmax_contacts = 1\n \n[auth${name}]\ntype=auth\nauth_type=userpass\npassword=${password}\nusername=${name}`;\n\nexport const usersParse = (users) => {\n  return users\n    .trim()\n    .split(\"\\n\")\n    .map((el) => {\n      const result =\n        el.trim().startsWith('\"') && el.endsWith('\"') ? el.slice(1, -1) : el;\n      return result;\n    })\n    .map((el) => el.split(\",\"))\n    .map(([name, password]) => ({ name, password }));\n};\n\nexport const generateUsersConfig = (users,  isOneContext, oneContextName) => {\n const usersWithContext = users.map(user=> {\n   return {\n     context: isOneContext ? oneContextName : `from_${user.name}`,\n     ...user\n   }\n })\n\n    return usersWithContext.map(genUserFromTemplate).join(\"\\r\\n\\r\\n\");\n  \n  \n};\n\nexport const generateUserList = (users) => {\n  const usersString = users.map(({ name }) => `\"${name}\"`).join(\", \");\n  return `export const LOCAL_NUMS = [${usersString}];`;\n};\n","import React, { useState, useEffect } from \"react\";\nimport TextArea from \"./components/TextArea\";\nimport Input from \"./components/Input\";\nimport Header from \"./components/Header\";\nimport ContextBlock from \"./components/ContextBlock\";\nimport { useInput } from \"./hooks\";\n\nimport {\n  generateUsersConfig,\n  usersParse,\n  generateUserList,\n} from \"./utils/userHandling\";\n\nconst transportDefault = `[$TRANSPORT_NAME]\ntype=transport\nallow_reload=yes\nprotocol=udp\nbind=0.0.0.0:5060`;\nconst transportNameDefault = \"udp-transport\";\nconst uplinkNameDefault = \"rtu\";\nconst uplinkAorDefault =\n  `[$UPLINK_NAME]\\rtype=aor\\rcontact=sip:$UPLINK_IP` +\n  `\\r\\r[$UPLINK_NAME]\ntype=endpoint\n100rel = no\nrtp_symmetric = yes\nforce_rport = yes\nrewrite_contact = yes\nice_support = no\ndirect_media = no\ntimers =  no\ninband_progress = yes\ntransport=$TRANSPORT_NAME\ncontext=from_$UPLINK_NAME\ndisallow=all\nallow=ulaw\naors=$UPLINK_NAME\ndirect_media=no` +\n  `\\r\\r[$UPLINK_NAME]\ntype=identify\nendpoint=$UPLINK_NAME\nmatch=$UPLINK_IP\n`;\n\nconst generateConfig = (\n  transport,\n  uplinkAor,\n  transportName,\n  uplinkName,\n  uplinkIp\n) => {\n  const result = transport + \"\\r\\n\\r\\n\" + uplinkAor;\n\n  return result\n    .replaceAll(\"$TRANSPORT_NAME\", transportName)\n    .replaceAll(\"$UPLINK_NAME\", uplinkName)\n    .replaceAll(\"$UPLINK_IP\", uplinkIp);\n};\n\nconst App = () => {\n  const [transportValue, setTransportValue] = useInput(transportDefault);\n  const [transportName, setTransportName] = useInput(transportNameDefault);\n  const [uplinkName, setUplinkName] = useInput(uplinkNameDefault);\n  const [uplinkIp, setUplinkIp] = useInput(\"192.168.1.1\");\n  const [isOneContext, setIsOneContext] = useState(true);\n  const [oneContextName, setOneContextName] = useInput(\"from_local\");\n  const [uplinkAor, serUplinkAor] = useInput(uplinkAorDefault);\n  const [users, setUsers] = useInput(`200,qwerty\\n\"201,qwer123\"`);\n  const [userList, setUserList] = useState([]);\n  const [resultStr, setResultStr] = useState(\"\");\n  useEffect(() => {\n    const config = generateConfig(\n      transportValue,\n      uplinkAor,\n      transportName,\n      uplinkName,\n      uplinkIp\n    );\n    const userParsed = usersParse(users);\n    const usersConfig = generateUsersConfig(userParsed, isOneContext, oneContextName);\n    const userList = generateUserList(userParsed);\n    setUserList(userList);\n    setResultStr(config + \"\\r\\n\\r\\n\" + usersConfig);\n  }, [transportValue, transportName, uplinkName, uplinkIp, uplinkAor, users,isOneContext, oneContextName ]);\n\n  return (\n    <div className=\"container terminal greed\">\n      <Header />\n      <div className=\"grid\">\n        <Input label=\"$UPLINK_IP\" value={uplinkIp} onChange={setUplinkIp} />\n        <Input\n          label=\"$TRANSPORT_NAME\"\n          value={transportName}\n          onChange={setTransportName}\n        />\n        <Input\n          label=\"$UPLINK_NAME\"\n          value={uplinkName}\n          onChange={setUplinkName}\n        />\n\n        <TextArea\n          value={transportValue}\n          onChange={setTransportValue}\n          label=\"Transpor\"\n        ></TextArea>\n        <TextArea\n          value={uplinkAor}\n          onChange={serUplinkAor}\n          label=\"Transport\"\n        ></TextArea>\n        <TextArea value={users} onChange={setUsers} label=\"Users\"></TextArea>\n      </div>\n      <ContextBlock  oneContext={isOneContext} oneContextChange={setIsOneContext} contextName={oneContextName} onNameChange={setOneContextName}/>\n      <Input value={userList} label=\"User list\" readOnly />\n      <TextArea rows={40} value={resultStr} readOnly label=\"Result\"></TextArea>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}