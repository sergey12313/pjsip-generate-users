{"version":3,"sources":["hooks.js","components/TextArea.jsx","components/Input.jsx","components/Header.jsx","utils/generateUsers.js","App.jsx","index.js"],"names":["useInput","value","useState","input","setInput","target","useRandomId","Math","random","TextArea","label","onChange","rows","cols","readOnly","id","className","htmlFor","Input","type","otherProps","name","Header","href","genUserFromTemplate","password","App","transportValue","setTransportValue","transportName","setTransportName","uplinkName","setUplinkName","uplinkIp","setUplinkIp","uplinkAor","serUplinkAor","users","setUsers","resultStr","setResultStr","useEffect","config","transport","replaceAll","generateConfig","usersConfig","trim","split","map","el","startsWith","endsWith","slice","join","generateUsers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ff140ff.chunk.js","sourcesContent":["import {useState} from \"react\"\n\nexport const useInput = (value) => {\n    const [input, setInput] = useState(value)\n    const onInputChange = ({target: {value}}) => {\n        setInput(value)\n    }\n    return [input, onInputChange, setInput]\n}\n\nexport const useRandomId = () => {\n   return useState(()=> `id${Math.random()}`)[0]\n}","import React from 'react'\nimport { useRandomId } from '../hooks'\n\nconst TextArea = ({label, value, onChange, rows=5, cols=30, readOnly}) => {\n    const id =  useRandomId()\n\n    return (\n        <div className=\"form-group\">\n        <label htmlFor={id}>{label}:</label>\n        <textarea id={id} cols={cols} rows={rows}  value={value} onChange={onChange} readOnly={readOnly}>Your text</textarea>\n      </div>\n    )\n}\n\nexport default TextArea\n","import React from 'react'\nimport { useRandomId } from '../hooks'\n\nconst Input = ({label, type=\"text\", ...otherProps}) => {\n    const id = useRandomId()\n    return (\n        <div className=\"form-group\">\n        <label htmlFor={id}>{label}:</label>\n        <input id={id} name=\"text\" type={type} {...otherProps}/>\n      </div>\n    )\n}\n\nexport default Input\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div className=\"terminal-nav\">\n      <div className=\"terminal-logo\">\n        <div className=\"logo terminal-prompt\">\n          <a href=\"/\" className=\"no-style\">\n            Pjsip.conf generator\n          </a>\n        </div>\n      </div>\n      <nav className=\"terminal-menu\"></nav>\n    </div>\n  );\n};\n\nexport default Header;\n","const genUserFromTemplate = ({ name, password }) => `[${name}]\ntype = endpoint\ncontext = from${name}\ndisallow = all\nallow = ulaw\naors = ${name}\nauth = auth${name}\n \n[${name}]\ntype = aor\nmax_contacts = 1\n \n[auth${name}]\ntype=auth\nauth_type=userpass\npassword=${password}\nusername=${name}`;\n\nexport const generateUsers = (users) => {\n  return users\n    .trim()\n    .split(\"\\n\")\n    .map((el) => {\n      const result =\n        el.trim().startsWith('\"') && el.endsWith('\"') ? el.slice(1, -1) : el;\n      return result;\n    })\n    .map((el) => el.split(\",\"))\n    .map(([name, password]) => ({ name, password }))\n    .map(genUserFromTemplate)\n    .join(\"\\r\\n\\r\\n\");\n};\n","import React, { useState, useEffect } from \"react\";\nimport TextArea from \"./components/TextArea\";\nimport Input from \"./components/Input\";\nimport Header from \"./components/Header\";\nimport { useInput } from \"./hooks\";\n\nimport { generateUsers } from \"./utils/generateUsers\";\n\nconst transportDefault = `[$TRANSPORT_NAME]\ntype=transport\nallow_reload=yes\nprotocol=udp\nbind=0.0.0.0:5060`;\nconst transportNameDefault = \"udp-transport\";\nconst uplinkNameDefault = \"rtu\";\nconst uplinkAorDefault =\n  `[$UPLINK_NAME]\\rtype=aor\\rcontact=sip:$UPLINK_IP` +\n  `\\r\\r[$UPLINK_NAME]\ntype=endpoint\ntransport=$TRANSPORT_NAME\ncontext=from_$UPLINK_NAME\ndisallow=all\nallow=ulaw\naors=rtu\ndirect_media=no` +\n  `\\r\\r[$UPLINK_NAME]\ntype=identify\nendpoint=$UPLINK_NAME\nmatch=$UPLINK_IP\n`;\n\nconst generateConfig = (\n  transport,\n  uplinkAor,\n  transportName,\n  uplinkName,\n  uplinkIp\n) => {\n  const result = transport + \"\\r\\n\\r\\n\" + uplinkAor;\n\n  return result\n    .replaceAll(\"$TRANSPORT_NAME\", transportName)\n    .replaceAll(\"$UPLINK_NAME\", uplinkName)\n    .replaceAll(\"$UPLINK_IP\", uplinkIp);\n};\n\nconst App = () => {\n  const [transportValue, setTransportValue] = useInput(transportDefault);\n  const [transportName, setTransportName] = useInput(transportNameDefault);\n  const [uplinkName, setUplinkName] = useInput(uplinkNameDefault);\n  const [uplinkIp, setUplinkIp] = useInput(\"192.168.1.1\");\n  const [uplinkAor, serUplinkAor] = useInput(uplinkAorDefault);\n  const [users, setUsers] = useInput(`200,qwerty\\n\"201,qwer123\"`);\n  const [resultStr, setResultStr] = useState(\"\");\n  useEffect(() => {\n    const config = generateConfig(\n      transportValue,\n      uplinkAor,\n      transportName,\n      uplinkName,\n      uplinkIp\n    );\n    const usersConfig = generateUsers(users);\n    setResultStr(config + \"\\r\\n\\r\\n\" + usersConfig);\n  }, [transportValue, transportName, uplinkName, uplinkIp, uplinkAor, users]);\n\n  return (\n    <div className=\"container terminal greed\">\n      <Header />\n      <div className=\"grid\">\n        <Input label=\"$UPLINK_IP\" value={uplinkIp} onChange={setUplinkIp} />\n        <Input\n          label=\"$TRANSPORT_NAME\"\n          value={transportName}\n          onChange={setTransportName}\n        />\n        <Input\n          label=\"$UPLINK_NAME\"\n          value={uplinkName}\n          onChange={setUplinkName}\n        />\n\n        <TextArea\n          value={transportValue}\n          onChange={setTransportValue}\n          label=\"Transpor\"\n        ></TextArea>\n        <TextArea\n          value={uplinkAor}\n          onChange={serUplinkAor}\n          label=\"Transport\"\n        ></TextArea>\n        <TextArea value={users} onChange={setUsers} label=\"Users\"></TextArea>\n      </div>\n      <TextArea rows={40} value={resultStr} readOnly label=\"Result\"></TextArea>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}